{"version":3,"sources":["Application.js","component/Button.js","serviceWorker.js","index.js"],"names":["Application","props","useValue","symbol","setState","num","state","sum","ccnum","length","prevNum","cnum","mainPrev","eval","String","useClear","useSum","sign","handleValue","cols","action","this","className","type","value","map","sys","i","key","href","Component","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ac6e4f7.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Button from \"./component/Button\";\r\nimport \"./css/style.css\";\r\n\r\nclass Application extends Component {\r\n\r\n    constructor(props){\r\n    super(props);\r\n\r\n    this.state ={\r\n        num: '',\r\n        prevNum: '',\r\n        sum: 0,\r\n        sign: ''\r\n    }\r\n\r\n    }\r\n\r\n\r\n\r\n useValue = (symbol) => {\r\n    \r\n   \r\n     this.setState({num: this.state.num + symbol})\r\n     this.setState({  sum: this.state.num + symbol })\r\n\r\n     var ccnum = this.state.num;\r\n     ccnum = ccnum[ccnum.length - 1]\r\n\r\n     if ((symbol === '.') && (ccnum === '+' || ccnum=== '-' || ccnum === '/' || ccnum === '*') ) {\r\n\r\n         this.setState({ num: this.state.prevNum })\r\n     }\r\n\r\n     if ((symbol === '+' || symbol === '-' || symbol === '/' || symbol === '*')){    \r\n         \r\n\r\n         var cnum = this.state.num;\r\n         cnum = cnum[cnum.length - 1]\r\n         this.setState({prevNum: this.state.num})\r\n        \r\n        \r\n         if (cnum === '+' || cnum === '-' || cnum === '/' || cnum === '*') {\r\n            \r\n             this.setState({ num: this.state.prevNum})\r\n             \r\n             \r\n         } else{ \r\n             \r\n        this.setState({ sum: this.state.num })\r\n        \r\n        \r\n        this.setState({sum: ''})\r\n\r\n\r\n         }\r\n         var mainPrev = this.state.num;\r\n         var num = eval(String(mainPrev))\r\n         this.setState({ sum: num });\r\n \r\n\r\n    } else{\r\n         this.setState({ sum: symbol })\r\n        \r\n    }\r\n\r\n\r\n\r\n     \r\n    \r\n\r\n    }\r\n\r\n\r\nuseClear = () => {\r\n        this.setState({ num: '' })\r\n    this.setState({ sum: '' })\r\n    }\r\n\r\nuseSum = () => {\r\n\r\n    var mainPrev = this.state.num;\r\n  \r\n    var num = eval(String(mainPrev))\r\n    this.setState({ sum: num});\r\n    this.setState({ num: num });\r\n\r\n    }\r\n\r\n\r\nrender(){\r\n\r\n    const handleValue = [\r\n        { symbol: '/', cols:1, action:this.useValue },\r\n        { symbol: '*', cols:1, action:this.useValue },\r\n        { symbol: 'C', cols:'2a', action:this.useClear },\r\n        { symbol: '7', cols:1, action:this.useValue },\r\n        { symbol: '8', cols:1, action:this.useValue },\r\n        { symbol: '9', cols:1, action:this.useValue },\r\n        { symbol: '-', cols:1, action:this.useValue },\r\n        { symbol: '4', cols:1, action:this.useValue },\r\n        { symbol: '5', cols:1, action:this.useValue },\r\n        { symbol: '6', cols:1, action:this.useValue },\r\n        { symbol: '+', cols:1, action:this.useValue },\r\n        { symbol: '1', cols:1, action:this.useValue },\r\n        { symbol: '2', cols:1, action:this.useValue },\r\n        { symbol: '3', cols:1, action:this.useValue },\r\n        { symbol: '.', cols:1, action:this.useValue },\r\n        { symbol: '0', cols:1, action:this.useValue },\r\n        { symbol: '=', cols:3, action:this.useSum }\r\n    ]\r\n\r\n    return(\r\n        <div  className=\"body\">\r\n            <div> \r\n    <span className=\"prevNum\">{this.state.num}</span>\r\n\r\n                <input type=\"text\" value={this.state.sum} /><br></br></div> \r\n            {handleValue.map((sys, i) => {\r\n\r\n                return (\r\n                    <Button symbol={sys.symbol} cols={sys.cols} action={ () => sys.action(sys.symbol)} key={i} />\r\n                )\r\n\r\n            })}\r\n            <br/>\r\n            <h5>Developed by <a href=\"https://sodiadrhian.github.io/portfolio\">Master Soji</a></h5>\r\n            </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\nexport default Application;","import React, {Component} from \"react\";\r\n\r\nclass Button extends Component {\r\n\r\n    render(){\r\n        return(\r\n        \r\n            <div className={`column-${this.props.cols}`}>\r\n    <button className=\"btn\" onClick={this.props.action}>{this.props.symbol}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './Application'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Application/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}